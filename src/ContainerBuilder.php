<?php

namespace LilleBitte\Container;

use LilleBitte\Container\Exception\ContainerException;

use function spl_object_hash;

/**
 * @author Paulus Gandung Prakosa <rvn.plvhx@gmail.com>
 */
class ContainerBuilder implements ContainerBuilderInterface
{
    /**
     * @var array
     */
    private $definitions = [];

    /**
     * @var array
     */
    private $compilerPasses = [];

    /**
     * @var array
     */
    private $instances = [];

    /**
     * @var array
     */
    private $cached = [];

    /**
     * @var string
     */
    private $cacheDir;

    /**
     * @var string
     */
    private $cacheFile;

    /**
     * {@inheritdoc}
     */
    public function build()
    {
        return new Container($this->definitions, $this->instances, $this->loadFromCache());
    }

    /**
     * {@inheritdoc}
     */
    public function register($id, $class)
    {
        return $this->setDefinition($id, new Definition($class));
    }

    /**
     * {@inheritdoc}
     */
    public function autowire($id, $class)
    {
        $definition = new Definition($class);
        $definition->setAutowire(true);

        return $this->setDefinition($id, $definition);
    }

    /**
     * {@inheritdoc}
     */
    public function instance($id, $instance)
    {
        $this->instances[$id] = $instance;
    }

    /**
     * {@inheritdoc}
     */
    public function setDefinition($id, Definition $definition)
    {
        return $this->definitions[$id] = $definition;
    }

    /**
     * {@inheritdoc}
     */
    public function addCompilerPass(CompilerPassInterface $pass)
    {
        $this->compilerPasses[] = $pass;
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        foreach ($this->compilerPasses as $pass) {
            $pass($this);
        }

        $this->writeCompiledContainerToCache();
    }

    /**
     * Get container cache directory
     *
     * @return string
     */
    public function getCacheDir()
    {
        return $this->cacheDir;
    }

    /**
     * Set container cache directory.
     *
     * @param string $dir Cache directory.
     * @return void
     */
    public function setCacheDir(string $dir)
    {
        $this->cacheDir = $dir;
    }

    /**
     * Get container cache file name.
     *
     * @return string
     */
    public function getCacheFile()
    {
        return $this->cacheFile;
    }

    /**
     * Set container cache file name.
     *
     * @param string $file Cache file name.
     * @return void
     */
    public function setCacheFile(string $file)
    {
        $this->cacheFile = $file;
    }

    /**
     * Write compiled container to cache file.
     *
     * @return void
     */
    protected function writeCompiledContainerToCache()
    {
        $hash = hash_hmac('sha256', spl_object_hash($this), get_class($this));
        $buf  = <<<CACHE_BUFFER
<?php

declare(strict_types=1);

/**
 * This file is generated by Lille Bitte dependency
 * injection container. Do not edit.
 *
 * @Hash {$hash}
 */
CACHE_BUFFER;
        $uses = [];

        $buf   .= "\n";
        $cached = "\n\n\$cachedContainer = [";

        foreach ($this->compilerPasses as $obj) {
            $buf    .= "\nuse " . $obj->getAssociatedClass() . ";";
            $cached .= "\n\t'" . $obj->getTag() . "' => " .
                $obj->getSerializedValue() . ",";
        }

        $buf .= rtrim($cached, ",") . "\n];";
        $buf .= "\n\nreturn \$cachedContainer;\n";

        // write compiled container to {file}
        file_put_contents(
            sprintf('%s/%s', $this->getCacheDir(), $this->getCacheFile()),
            $buf
        );
    }

    /**
     * Load container from cache file.
     *
     * @return array
     */
    protected function loadFromCache()
    {
        $file = sprintf('%s/%s', $this->getCacheDir(), $this->getCacheFile());
        return file_exists($file) && filesize($file) > 0
            ? require $file
            : [];
    }
}
